locations_df <- st_transform(locations_df, 4326)
# combining geometry data with other meta data
gardens <- gardens %>%
left_join(locations_df)
# Reading in the other data file to combine everything
files <- list.files("New Data", pattern = ".shp", full.names = TRUE)
# Cultivate gardens
cult_gard <- st_read(files[5], quiet = T)
# Changing the projection to the same as the data frame above
cult_gard <- st_transform(cult_gard, 4326)
# changing the column names to be consistent and adding same columns as above
colnames(cult_gard)[colnames(cult_gard) == "geometry"] <- "point"
colnames(cult_gard)[colnames(cult_gard) == "Location"] <- "Garden_property_name"
# Manually adding lat and long for one garden that didn't work with
# open street map (found the lat and lon on google maps)
# Bellair Farm = 37.89181455241969, -78.51879205984392
locations_df$x <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", -78.51879205984392,
locations_df$x)
locations_df$x
# Manually adding lat and long for one garden that didn't work with
# open street map (found the lat and lon on google maps)
# Bellair Farm = 37.89181455241969, -78.51879205984392
locations_df$x <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", -78.51879205984392,
locations_df$x)
locations_df$y <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", 37.89181455241969,
locations_df$y)
View(locations_df)
locations_df <- geocode_OSM(
gardens[,"Address"],
projection = 4326,
return.first.only = TRUE,
keep.unfound = TRUE,
as.sf = TRUE,
geometry = "point",
server = "https://nominatim.openstreetmap.org"
)
# Manually adding lat and long for one garden that didn't work with
# open street map (found the lat and lon on google maps)
# Bellair Farm = 37.89181455241969, -78.51879205984392
locations_df$x <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", -78.51879205984392,
locations_df$x)
locations_df$y <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", 37.89181455241969,
locations_df$y)
locations_df$point[(locations_df$Address == "5290 Bellair Farm, Charlottesville VA 22902")] <- st_point(c(locations_df$x[5], locations_df$y[5]))
#re-naming column so I can join locations_df with gardens
colnames(locations_df)[colnames(locations_df) == "query"] <- "Address"
# Only need a few columns
locations_df <- locations_df[,c("Address", "x", "y", "point")]
# Changing the projection to the same as the data below
locations_df <- st_transform(locations_df, 4326)
# combining geometry data with other meta data
gardens <- gardens %>%
left_join(locations_df)
# Reading in the other data file to combine everything
files <- list.files("New Data", pattern = ".shp", full.names = TRUE)
# Cultivate gardens
cult_gard <- st_read(files[5], quiet = T)
View(cult_gard)
# Changing the projection to the same as the data frame above
cult_gard <- st_transform(cult_gard, 4326)
# changing the column names to be consistent and adding same columns as above
colnames(cult_gard)[colnames(cult_gard) == "geometry"] <- "point"
colnames(cult_gard)[colnames(cult_gard) == "Location"] <- "Garden_property_name"
gardens$Garden_property_name <- cbind(gardens$Garden_property_name, cult_gard$Garden_property_name)
cbind(gardens$Garden_property_name, cult_gard$Garden_property_name)
# Manually adding lat and long for one garden that didn't work with
# open street map (found the lat and lon on google maps)
# Bellair Farm = 37.89181455241969, -78.51879205984392
locations_df$x <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", -78.51879205984392,
locations_df$x)
locations_df$y <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", 37.89181455241969,
locations_df$y)
locations_df$point[(locations_df$Address == "5290 Bellair Farm, Charlottesville VA 22902")] <- st_point(c(locations_df$x[5], locations_df$y[5]))
locations_df$point
View(locations_df)
#re-naming column so I can join locations_df with gardens
colnames(locations_df)[colnames(locations_df) == "query"] <- "Address"
# Only need a few columns
locations_df <- locations_df[,c("Address", "x", "y", "point")]
# Changing the projection to the same as the data below
locations_df <- st_transform(locations_df, 4326)
View(locations_df)
# combining geometry data with other meta data
gardens <- gardens %>%
left_join(locations_df)
View(gardens)
# Manually adding lat and long for one garden that didn't work with
# open street map (found the lat and lon on google maps)
# Bellair Farm = 37.89181455241969, -78.51879205984392
locations_df$x <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", -78.51879205984392,
locations_df$x)
locations_df$y <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", 37.89181455241969,
locations_df$y)
locations_df$point[(locations_df$Address == "5290 Bellair Farm, Charlottesville VA 22902")] <- st_point(c(locations_df$x[5], locations_df$y[5]))
#re-naming column so I can join locations_df with gardens
colnames(locations_df)[colnames(locations_df) == "query"] <- "Address"
# Only need a few columns
locations_df <- locations_df[,c("Address", "x", "y", "point")]
# Changing the projection to the same as the data below
locations_df <- st_transform(locations_df, 4326)
# combining geometry data with other meta data
gardens <- locations_df %>%
left_join(gardens)
View(gardens)
gardens <- read.csv("gardendata.csv")
View(gardens)
locations_df <- geocode_OSM(
gardens[,"Address"],
projection = 4326,
return.first.only = TRUE,
keep.unfound = TRUE,
as.sf = TRUE,
geometry = "point",
server = "https://nominatim.openstreetmap.org"
)
# Manually adding lat and long for one garden that didn't work with
# open street map (found the lat and lon on google maps)
# Bellair Farm = 37.89181455241969, -78.51879205984392
locations_df$x <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", -78.51879205984392,
locations_df$x)
locations_df$y <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", 37.89181455241969,
locations_df$y)
locations_df$point[(locations_df$Address == "5290 Bellair Farm, Charlottesville VA 22902")] <- st_point(c(locations_df$x[5], locations_df$y[5]))
#re-naming column so I can join locations_df with gardens
colnames(locations_df)[colnames(locations_df) == "query"] <- "Address"
# Only need a few columns
locations_df <- locations_df[,c("Address", "x", "y", "point")]
# Changing the projection to the same as the data below
locations_df <- st_transform(locations_df, 4326)
View(locations_df)
locations_df$point[(locations_df$Address == "5290 Bellair Farm, Charlottesville VA 22902")] <- st_point(c(locations_df$x[5], locations_df$y[5]))
#re-naming column so I can join locations_df with gardens
colnames(locations_df)[colnames(locations_df) == "query"] <- "Address"
# Only need a few columns
locations_df <- locations_df[,c("Address", "x", "y", "point")]
# Changing the projection to the same as the data below
locations_df <- st_transform(locations_df, 4326)
# combining geometry data with other meta data
gardens <- gardens %>%
left_join(locations_df)
View(gardens)
# Reading in the other data file to combine everything
files <- list.files("New Data", pattern = ".shp", full.names = TRUE)
# Cultivate gardens
cult_gard <- st_read(files[5], quiet = T)
# Changing the projection to the same as the data frame above
cult_gard <- st_transform(cult_gard, 4326)
# changing the column names to be consistent and adding same columns as above
colnames(cult_gard)[colnames(cult_gard) == "geometry"] <- "point"
colnames(cult_gard)[colnames(cult_gard) == "Location"] <- "Garden_property_name"
allgardens <- sp::merge(gardens, cult_gard[,"Garden_property_name"], by = "Garden_property_name", all.x = T)
allgardens <- sp::merge(gardens, cult_gard[,c("Garden_property_name", "point")], by = "Garden_property_name", all.x = T, all.y = T)
allgardens <- sp::merge(gardens, cult_gard, by = "Garden_property_name", all.x = T, all.y = T)
allgardens <- merge(gardens, cult_gard, by = "Garden_property_name", all.x = T, all.y = T)
allgardens <- merge(gardens, cult_gard[,"Garden_property_name", "point"], by = "Garden_property_name", all.x = T, all.y = T)
allgardens <- base::merge(gardens, cult_gard[,"Garden_property_name", "point"], by = "Garden_property_name", all.x = T, all.y = T)
gardens[13,] <- NA
View(gardens)
gardens[(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard)), ] <- NA
View(gardens)
View(gardens)
View(gardens)
gardens <- gardens[1:12, ]
View(gardens)
gardens[(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard)), 'Garden_property_name'] <- cult_gard$Garden_property_name
((nrow(gardens) + 1) + nrow(cult_gard))
(nrow(gardens) + 1)
gardens[(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard)), 'Garden_property_name'] <- NA
View(gardens)
gardens <- gardens[1:12, ]
cult_gard$Garden_property_name
(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard)
(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard))
(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard))
(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard))
gardens[(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard) - 1), 'Garden_property_name'] <- cult_gard$Garden_property_name
View(gardens)
View(gardens)
View(cultgardens)
View(gardens)
gardens <- gardens[1:12, ]
gardens[(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard) - 1), c('Garden_property_name', 'point'] <- cult_gard[, c('Garden_property_name', 'pont')]
gardens[(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard) - 1), c('Garden_property_name', 'point')] <- cult_gard[, c('Garden_property_name', 'pont')]
gardens[(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard) - 1), c('Garden_property_name', 'point')] <- cult_gard[, c('Garden_property_name', 'piont')]
gardens[(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard) - 1), c('Garden_property_name', 'point')] <- cult_gard[, c('Garden_property_name', 'point')]
View(gardens)
View(cult_gard)
gardens[(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard) - 1), c('Garden_property_name', 'point')]
cult_gard[, c('Garden_property_name', 'point')]
cult_gard[, c('Garden_property_name', 'point')]
# Cultivate gardens
cult_gard <- st_read(files[5], quiet = T)
# Changing the projection to the same as the data frame above
cult_gard <- st_transform(cult_gard, 4326)
# changing the column names to be consistent and adding same columns as above
st_geometry(cult_gard) <- "point"
?st
?st_geometry
# changing the column names to be consistent and adding same columns as above
st_geometry(cult_gard) <- cult_gard$
colnames(cult_gard)[colnames(cult_gard) == "geometry"] <- "point"
# Cultivate gardens
cult_gard <- st_read(files[5], quiet = T)
# Changing the projection to the same as the data frame above
cult_gard <- st_transform(cult_gard, 4326)
st_geometry(cult_gard$geometry) <- "point"
colnames(cult_gard)[colnames(cult_gard) == "geometry"] <- "point"
colnames(cult_gard)[colnames(cult_gard) == "Location"] <- "Garden_property_name"
# changing the column names to be consistent and adding same columns as above
st_geometry(cult_gard$geometry) <- "point"
# changing the column names to be consistent and adding same columns as above
st_geometry(cult_gard) <- cult_gard$point
View(cult_gard)
# Changing the projection to the same as the data frame above
cult_gard <- st_transform(cult_gard, 4326)
# Cultivate gardens
cult_gard <- st_read(files[5], quiet = T)
# Changing the projection to the same as the data frame above
cult_gard <- st_transform(cult_gard, 4326)
View(cult_gard)
# changing the column names to be consistent and adding same columns as above
colnames(cult_gard)[colnames(cult_gard) == "geometry"] <- "point"
View(cult_gard)
colnames(cult_gard)[colnames(cult_gard) == "Location"] <- "Garden_property_name"
st_geometry(cult_gard) <- cult_gard$point
View(cult_gard)
str(cult_gard)
st_geometry(cult_gard)
st_geometry(gardens)
gardens <- read.csv("gardendata.csv")
locations_df <- geocode_OSM(
gardens[,"Address"],
projection = 4326,
return.first.only = TRUE,
keep.unfound = TRUE,
as.sf = TRUE,
geometry = "point",
server = "https://nominatim.openstreetmap.org"
)
# Manually adding lat and long for one garden that didn't work with
# open street map (found the lat and lon on google maps)
# Bellair Farm = 37.89181455241969, -78.51879205984392
locations_df$x <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", -78.51879205984392,
locations_df$x)
locations_df$y <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", 37.89181455241969,
locations_df$y)
locations_df$point[(locations_df$Address == "5290 Bellair Farm, Charlottesville VA 22902")] <- st_point(c(locations_df$x[5], locations_df$y[5]))
View(locations_df)
# Manually adding lat and long for one garden that didn't work with
# open street map (found the lat and lon on google maps)
# Bellair Farm = 37.89181455241969, -78.51879205984392
locations_df$x <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", -78.51879205984392,
locations_df$x)
locations_df$y <- ifelse(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902", 37.89181455241969,
locations_df$y)
locations_df$point[(locations_df$Address == "5290 Bellair Farm, Charlottesville VA 22902")] <- st_point(c(locations_df$x[5], locations_df$y[5]))
locations_df$point[(locations_df$Address == "5290 Bellair Farm, Charlottesville VA 22902")] <- st_point(c(locations_df$x[5], locations_df$y[5]))
locations_df$point[(locations_df$Address == "5290 Bellair Farm, Charlottesville VA 22902")] <- st_point(c(locations_df$x[5], locations_df$y[5]))
locations_df$point[(locations_df$query == "5290 Bellair Farm, Charlottesville VA 22902")] <- st_point(c(locations_df$x[5], locations_df$y[5]))
#re-naming column so I can join locations_df with gardens
colnames(locations_df)[colnames(locations_df) == "query"] <- "Address"
# Only need a few columns
locations_df <- locations_df[,c("Address", "x", "y", "point")]
# Changing the projection to the same as the data below
locations_df <- st_transform(locations_df, 4326)
View(locations_df)
st_geometry(locations_df)
# combining geometry data with other meta data
gardens <- gardens %>%
left_join(locations_df)
st_geometry(gardens)
gardens <- read.csv("gardendata.csv")
# combining geometry data with other meta data
gardens <- locations_df %>%
left_join(gardens)
st_geometry(gardens)
View(gardens)
g
rename_geometry <- function(g, name) {
current = attr(g, "sf_column")
names(g)[names(g) == current] = name
st_geometry(g) = name
g
}
rename_geometry(gardens, "geometry")
gardens <- rename_geometry(gardens, "geometry")
View(gardens)
st_geometry(gardens)
# Reading in the other data file to combine everything
files <- list.files("New Data", pattern = ".shp", full.names = TRUE)
# Cultivate gardens
cult_gard <- st_read(files[5], quiet = T)
View(cult_gard)
# Changing the projection to the same as the data frame above
cult_gard <- st_transform(cult_gard, 4326)
# changing the column names to be consistent and adding same columns as above
colnames(cult_gard)[colnames(cult_gard) == "Location"] <- "Garden_property_name"
gardens[(nrow(gardens) + 1):((nrow(gardens) + 1) + nrow(cult_gard) - 1), c('Garden_property_name', 'geometry')] <- cult_gard[, c('Garden_property_name', 'geometry')]
View(gardens)
strsplit('abc')
strsplit('abc', split = '')
reverse <- function(x) {
split <- strsplit(x, split = '')
new_s <- ''
for (i in length(split):1) {
new_s <- paste0(new_s, split[i])
}
new_s
}
reverse('abc')
strsplit('abc', split = '')
reverse <- function(x) {
split <- strsplit(x, split = '')
new_s <- ''
for (i in length(split):1) {
new_s <- paste0(new_s, split[i], collapse = '')
}
new_s
}
reverse('abc')
paste0('', 'a', 'b')
View(reverse)
reverse <- function(x) {
split <- strsplit(x, split = '')
new_s <- ''
for (i in length(split):1) {
new_s <- paste0(new_s, split[i], collapse = '')
}
new_s
}
reverse <- function(x) {
split <- strsplit(x, split = '')
split
# new_s <- ''
# for (i in length(split):1) {
#   new_s <- paste0(new_s, split[i], collapse = '')
# }
# new_s
}
reverse('abc')
split <- strsplit('abc', split = '')
new_s <- ''
View(split)
reverse <- function(x) {
split <- unlist(strsplit(x, split = ''))
new_s <- ''
for (i in length(split):1) {
new_s <- paste0(new_s, split[i], collapse = '')
}
new_s
}
reverse('abc')
reverse('Lee is hot 696969 420')
reverse('gnab annaw')
View(gardens)
gardens$Managed_by[13:22] <- cult_gard$Managed_by
# The 6th st and Monticello garden was in the data twice, so I'm getting rid of the extra
gardens$Managed_by[12] <- "Urban Agriculture Collective"
gardens <- gardens[-22,]
View(gardens)
write_rds(gardens, "gardens_geo.RDS")
write.csv(gardens, 'gardens_nogeo.csv', row.names = F)
gardens <- gardens[,-"x", -"y"]
gardens <- gardens[,-c("x", "y")]
View(gardens)
gardens <- gardens[,c(1, 3:12)]
View(gardens)
gardens <- gardens[,c(1, 3:12)]
gardens <- gardens[,c(1, 3:11)]
View(gardens)
write_rds(gardens, "gardens_geo.RDS")
write.csv(gardens, 'gardens_nogeo.csv', row.names = F)
gardendat <- readRDS("gardens_geo.RDS")
View(gardendat)
gardendat$Status <- ifelse(gardendat$Status == "Lost", gardendat$Status, "Existing")
gardendat$Status <- ifelse(is.na(gardendat$Status = T), "Existing", gardendat$Status)
gardendat$Status <- ifelse(is.na(gardendat$Status == T), "Existing", gardendat$Status)
## potential new garden parcels
land_search <- st_read(files[1], quiet = T)
land_search$Address <- ifelse(is.na(land_search$Address == T), land_search$Prop_Name, land_search$Address)
files <- list.files("New Data", pattern = ".shp", full.names = TRUE)
## potential new garden parcels
land_search <- st_read(files[1], quiet = T)
land_search$Address <- ifelse(is.na(land_search$Address == T), land_search$Prop_Name, land_search$Address)
land_search <- land_search %>%
rename(Location = Address)
land_search <- st_transform(land_search, 4326)
# public housing
crha <- st_read(files[4], quiet = T)
crha <- st_transform(crha, 4326)
pal <- colorFactor(c("navy", "purple"), domain = gardendat$Managed_by)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data = gardendat[gardendat$Status == "Existing",], group = "Gardens",
color = "black",
fillColor = ~pal(gardendat$Managed_by),
radius = 8,
popup = paste0("Location: ", gardendat$Location_description, "<br>",
"Managed/Owned by: ", gardendat$Managed_by, "<br>",
"Size: ", gardendat$Size)) %>%
addCircleMarkers(data = gardendat[gardendat$Status == "Lost",], group = "Lost gardens",
color = "grey",
fillColor = ~pal(gardendat$Managed_by),
radius = 8,
popup = paste0("Location: ", gardendat$Location_description, "<br>",
"Managed/Owned by: ", gardendat$Managed_by, "<br>",
"Size: ", gardendat$Size)) %>%
addPolygons(data = land_search, group = "Potential gardens",
color = "purple",
popup = paste0("Location: ", land_search$Location, "<br>",
"Managed/Owned by: ", land_search$Owner, "<br>",
"Size: ", land_search$P_size, "<br>",
"Own Type: ", land_search$Own_type)) %>%
addPolygons(data = crha, group = "Public Housing",
color = "red",
popup = paste0("Name: ", crha$Name, "<br>",
"Location: ", crha$Address, "<br>",
"Owner: ", crha$Owned_by, "<br>",
"Acreage: ", crha$Acreage))  %>%
addLayersControl(
overlayGroups = c("Gardens", "Lost gardens", "Potential gardens", "Public Housing"),
options = layersControlOptions(collapsed = FALSE),
position = "bottomright"
) %>%
hideGroup("Gardens") %>%
hideGroup("Lost gardens") %>%
hideGroup("Potential gardens") %>%
hideGroup("Public Housing") %>%
addLegend(pal = pal(),
values = as.numeric(d1()),
position = "topright",
opacity = 0.25,
title = "Layers")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data = gardendat[gardendat$Status == "Existing",], group = "Gardens",
color = "black",
fillColor = ~pal(gardendat$Managed_by),
radius = 8,
popup = paste0("Location: ", gardendat$Location_description, "<br>",
"Managed/Owned by: ", gardendat$Managed_by, "<br>",
"Size: ", gardendat$Size)) %>%
addCircleMarkers(data = gardendat[gardendat$Status == "Lost",], group = "Lost gardens",
color = "grey",
fillColor = ~pal(gardendat$Managed_by),
radius = 8,
popup = paste0("Location: ", gardendat$Location_description, "<br>",
"Managed/Owned by: ", gardendat$Managed_by, "<br>",
"Size: ", gardendat$Size)) %>%
addPolygons(data = land_search, group = "Potential gardens",
color = "purple",
popup = paste0("Location: ", land_search$Location, "<br>",
"Managed/Owned by: ", land_search$Owner, "<br>",
"Size: ", land_search$P_size, "<br>",
"Own Type: ", land_search$Own_type)) %>%
addPolygons(data = crha, group = "Public Housing",
color = "red",
popup = paste0("Name: ", crha$Name, "<br>",
"Location: ", crha$Address, "<br>",
"Owner: ", crha$Owned_by, "<br>",
"Acreage: ", crha$Acreage))  %>%
addLayersControl(
overlayGroups = c("Gardens", "Lost gardens", "Potential gardens", "Public Housing"),
options = layersControlOptions(collapsed = FALSE),
position = "bottomright"
) %>%
hideGroup("Gardens") %>%
hideGroup("Lost gardens") %>%
hideGroup("Potential gardens") %>%
hideGroup("Public Housing") %>%
addLegend(pal = pal(),
position = "topright",
opacity = 0.25,
title = "Layers")
?addLayersControl
pal <- colorFactor(c("navy", "purple"), domain = gardendat$Managed_by)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data = gardendat[gardendat$Status == "Existing",], group = "Gardens",
color = "black",
fillColor = ~pal(gardendat$Managed_by),
radius = 8,
popup = paste0("Location: ", gardendat$Garden_property_name, "<br>",
"Managed/Owned by: ", gardendat$Managed_by, "<br>",
"Size: ", gardendat$Size)) %>%
addCircleMarkers(data = gardendat[gardendat$Status == "Lost",], group = "Lost gardens",
color = "grey",
fillColor = ~pal(gardendat$Managed_by),
radius = 8,
popup = paste0("Location: ", gardendat$Garden_property_name, "<br>",
"Managed/Owned by: ", gardendat$Managed_by, "<br>",
"Size: ", gardendat$Size)) %>%
addPolygons(data = land_search, group = "Potential gardens",
color = "purple",
popup = paste0("Location: ", land_search$Location, "<br>",
"Managed/Owned by: ", land_search$Owner, "<br>",
"Size: ", land_search$P_size, "<br>",
"Own Type: ", land_search$Own_type)) %>%
addPolygons(data = crha, group = "Public Housing",
color = "red",
popup = paste0("Name: ", crha$Name, "<br>",
"Location: ", crha$Address, "<br>",
"Owner: ", crha$Owned_by, "<br>",
"Acreage: ", crha$Acreage))  %>%
addLayersControl(
overlayGroups = c("Gardens", "Lost gardens", "Potential gardens", "Public Housing"),
options = layersControlOptions(collapsed = FALSE),
position = "bottomright"
) %>%
hideGroup("Lost gardens") %>%
hideGroup("Potential gardens") %>%
hideGroup("Public Housing")
